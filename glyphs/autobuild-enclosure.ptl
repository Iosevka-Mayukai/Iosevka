###### Automatic builds
$$include '../meta/macros.ptl'

import [mix linreg clamp fallback] from '../support/utils'
import [getGrMesh AnyCv] from "../support/gr"

glyph-module

glyph-block AutoBuild-Enclosure : begin

	glyph-block-import CommonShapes

	define [CircNameNoCheck unicode prefix digits parts suffix] : begin
		local baseName : prefix + '-' + unicode + '-' + digits + '-' + [parts.join '_']
		local name : baseName + "." + suffix
		return name
	define [CircName unicode prefix digits parts suffix] : begin
		local name : CircNameNoCheck unicode prefix digits parts suffix
		if [query-glyph name] : begin
			throw : new Error "Glyph exists : \(prefix) \(digits) \(parts) \(suffix)"
		return name

	# Build miniature glyphs : circled, superscripts, subscripts...
	# Circled

	define circleWidthClasses {{'NWID' Width 0.12} {'WWID' WideWidth0 0.08}}
	define [AdjustDigitCount digits width] : Math.max 1 (digits * Width / width)
	define [EnclosureStrokeScale dscale digits width] : dscale / [Math.pow [AdjustDigitCount digits width] 0.66]

	define [circleInner dscale miniatureFont parts width mockInnerWidth bal baly] : begin
		local totalWidth 0
		local firstDerivedGyph null
		local shift 0
		foreach [gidPart : items-of parts] : do
			local derivedGlyph miniatureFont.(gidPart)
			if [not firstDerivedGyph] : set firstDerivedGyph derivedGlyph
			set totalWidth : totalWidth + derivedGlyph.advanceWidth
		local xCompress [Math.min 1 (mockInnerWidth / totalWidth)]
		set totalWidth : Math.min mockInnerWidth totalWidth
		if (firstDerivedGyph && firstDerivedGyph.anchors.above && firstDerivedGyph.anchors.below) : begin
			if bal : set shift : CAP / 2 - [mix baly [mix firstDerivedGyph.anchors.above.y firstDerivedGyph.anchors.below.y 0.5] bal]
			: else : set shift : CAP / 2 - [mix firstDerivedGyph.anchors.above.y firstDerivedGyph.anchors.below.y 0.5]

		foreach [gidPart : items-of parts] : do
			define gniPart : '.ci.' + gidPart + '@' + [{parts.length dscale width xCompress bal baly}.join '/']
			if [not : query-glyph gniPart] : begin
				create-glyph gniPart : glyph-construction
					include miniatureFont.(gidPart) AS_BASE ALSO_METRICS
					apply-transform : Upright
					apply-transform : Scale (dscale * xCompress) dscale
					apply-transform : Translate 0 (dscale * (-CAP / 2 + shift))
					apply-transform : Translate 0 (CAP / 2 * dscale)
					apply-transform : Translate 0 (symbolMid - CAP * dscale / 2)
					apply-transform : Italify

		return : create-glyph : glyph-construction
			local tw 0
			foreach [gidPart : items-of parts] : do
				define gniPart : '.ci.' + gidPart + '@' + [{parts.length dscale width xCompress bal baly}.join '/']
				local part : query-glyph gniPart
				include part
				apply-transform : Translate (-part.advanceWidth * dscale * xCompress) 0
				set tw : tw + part.advanceWidth * dscale * xCompress
			apply-transform : Translate (tw / 2) 0
			apply-transform : Translate (width / 2) 0

	define [CircCrowd digits width] : 2 + 2 * [Math.pow [AdjustDigitCount digits width] 0.5] * [Math.max 1 (HalfUPM / Width)]
	define [CircScale digits width] : 0.65 / [Math.pow [AdjustDigitCount digits width] 0.5]

	define [circleDimens digits w m] : begin
		define width : fallback w Width
		define dscale :  linreg HalfUPM 0.55 UPM 0.6  width
		define spatt  : [linreg HalfUPM 0.22 UPM 0.27 width] * (Width / HalfUPM)
		define sw0 : [EnclosureStrokeScale dscale digits width] * [adviceBlackness [CircCrowd digits width]] / [CircScale digits width]
		define sw : Math.max sw0 [fallback m 0]
		define top : symbolMid + CAP * dscale / 2 + (CAP * spatt)
		define bot : symbolMid - CAP * dscale / 2 - (CAP * spatt)
		define mosaicLeft 0
		define mosaicRight width
		define mosaicBot fontMetrics.OS_2.sTypoDescender
		define mosaicTop fontMetrics.OS_2.sTypoAscender
		define left : Math.max
			SB + O * 3
			Math.min
				width / 2 - (top - bot) / 2
				width / 2 - CAP / 2 * dscale - sw * 2.5
		define right : Math.min
			width - SB - O * 3
			Math.max
				width / 2 + (top - bot) / 2
				width / 2 + CAP / 2 * dscale + sw * 2.5
		define mockInnerWidth : width + 2 * (Stroke - sw) * dscale
		define smoothA : SmoothAOf (SmallSmooth * (right - left) / (RightSB - SB)) width
		define smoothB : SmoothBOf (SmallSmooth * (right - left) / (RightSB - SB)) width
		return : object width mockInnerWidth dscale sw0 sw top bot left right mosaicTop mosaicBot mosaicLeft mosaicRight smoothA smoothB

	define [CollectRelatedGlyphs prefix suffix digits demands] : begin
		local jobs {}
		local relApplications {}
		foreach {unicode parts w bal baly} [items-of demands] : do
			local origJobGlyphGn : CircName unicode prefix digits parts suffix
			jobs.push { origJobGlyphGn unicode parts w bal baly }

			local mesh : getGrMesh parts AnyCv query-glyph
			foreach {gr fromParts toParts} [items-of mesh] : do
				local fromGn : CircNameNoCheck unicode prefix digits fromParts suffix
				local toGn   : CircName        unicode prefix digits toParts   suffix
				jobs.push { toGn null toParts w bal baly }
				relApplications.push : list gr fromGn toGn
		return { jobs relApplications }

	define [CircApplyRelations relApplications] : begin
		foreach {gr f t} [items-of relApplications] : begin
			if [query-glyph f] : gr.set [query-glyph f] t

	define [CircledMiniatureFont digits width jobs] : begin
		local pendingGlyphs : jobs.map : [job] => job.2
		return : Miniature
			glyphs  -- [pendingGlyphs.reduce : [a b] => [a.concat b]]
			crowd   -- [CircCrowd digits width]
			scale   -- [CircScale digits width]
			sbscale -- 1

	define [EnclosureT prefix digits demands fn] : begin
		foreach {suffix ww gap} [items-of circleWidthClasses] : do
			define { jobs ra } : CollectRelatedGlyphs prefix suffix digits demands
			local miniatureFont : CircledMiniatureFont digits ww jobs
			foreach job [items-of jobs] : do
				fn ww gap job miniatureFont
			CircApplyRelations ra

	define [createCircledGlyphs digits demands] : EnclosureT 'circle' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw top bot left right smoothA smoothB] : circleDimens digits ww
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : circleInner dscale miniatureFont parts width mockInnerWidth bal baly
			include : OShape top bot left right sw smoothA smoothB

	define [createBoxedGlyphs digits demands] : EnclosureT 'boxed' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw top bot left right] : circleDimens digits ww
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : circleInner dscale miniatureFont parts width mockInnerWidth bal baly
			include : union
				HBarTop    left right top sw
				HBarBottom left right bot sw
				VBarLeft   left bot top   sw
				VBarRight  right bot top  sw

	define [createInsetCircledGlyphs digits demands] : EnclosureT 'inset-circle' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw top bot left right smoothA smoothB] : circleDimens digits ww
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : difference
				OShapeOutline top bot left right sw smoothA smoothB
				circleInner dscale miniatureFont parts width mockInnerWidth bal baly

	define [createInsetBoxedGlyphs digits demands] : EnclosureT 'inset-boxed' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw top bot left right] : circleDimens digits ww
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : difference
				spiro-outline
					corner left  top
					corner left  bot
					corner right bot
					corner right top
					close
				circleInner dscale miniatureFont parts width mockInnerWidth bal baly

	define [createInsetMosaicGlyphs digits demands] : EnclosureT 'inset-mosaic' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw mosaicTop mosaicBot mosaicLeft mosaicRight] : circleDimens digits ww
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : difference
				glyph-construction
					include : ForceUpright
					include : spiro-outline
						corner mosaicLeft  mosaicTop
						corner mosaicLeft  mosaicBot
						corner mosaicRight mosaicBot
						corner mosaicRight mosaicTop
						close
				glyph-construction
					include : circleInner dscale miniatureFont parts width mockInnerWidth bal baly

	define [createDoubleCircledGlyphs digits demands] : EnclosureT 'double-circle' digits demands : lambda [ww gap job miniatureFont] : begin
		define { gn unicode parts w bal baly } job
		define [object width mockInnerWidth dscale sw0 sw top bot left right smoothA smoothB] : circleDimens digits ww (ww * gap)
		define sw1 : Math.min sw0 (sw / 3)
		if [not : query-glyph gn] : create-glyph gn : glyph-construction
			set-width width
			if (w == ww && unicode) : assign-unicode unicode
			include : circleInner dscale miniatureFont parts width mockInnerWidth bal baly
			include : OShape top bot left right sw1 smoothA smoothB
			include : OShape
				top - sw + sw1
				bot + sw - sw1
				left + sw * HVContrast - sw1 * HVContrast
				right - sw * HVContrast + sw1 * HVContrast
				begin sw1
				smoothA - sw + sw1
				smoothB - sw + sw1

	define [BraceCrowd digits width] : 2.75 + [AdjustDigitCount digits width]
	define [BraceScale digits width] : 0.65 / [Math.pow [AdjustDigitCount digits width] 0.5]
	define [bracedDottdeDimens digits width] : begin
		define dscale : linreg Width 0.55 UPM 0.65 width
		define pscale : linreg Width 0.6 UPM 0.75 width
		define sw0 : [EnclosureStrokeScale dscale digits width] * [adviceBlackness [BraceCrowd digits width]] / [BraceScale digits width]
		define sw : Math.min Stroke sw0
		define l : Math.max (SB + O * 3) (width / 2 - [Math.max (Width * digits) CAP] / 2)
		define r : width - l
		define mockInnerWidth : width + 2 * (Stroke - sw) * dscale
		return : object width sw dscale pscale l r mockInnerWidth

	define [createBracedGlyphs digits demands] : begin
		foreach {suffix ww} [items-of circleWidthClasses] : do
			define { jobs ra } : CollectRelatedGlyphs 'braced' suffix digits demands
			define pendingGlyphs : jobs.map : [record] => record.2
			define miniatureFont : Miniature
				glyphs  -- [pendingGlyphs.reduce : [a b] => [a.concat b]]
				crowd   -- [BraceCrowd digits ww]
				scale   -- [BraceScale digits ww]
				sbscale -- 1

			define gnb : CircName null '.braced-brace' digits {} suffix
			if [not : query-glyph gnb] : create-glyph gnb : glyph-construction
				define [object width dscale pscale sw l r] : bracedDottdeDimens digits ww
				local s : TanSlope * symbolMid / 2
				local p : 0.1 * [Math.sqrt : Math.min 1 (width / (digits * Width))]
				set-width width
				include : dispiro
					widths.lhs sw
					g4 ([mix l r p] - s) (parenTop * pscale)
					g4.down.mid (l - s + O) (symbolMid * pscale)
					g4 ([mix l r p] - s) (parenBot * pscale)

				include : dispiro
					widths.rhs sw
					g4 ([mix r l p] + s) (parenTop * pscale)
					g4.down.mid (r + s - O) (symbolMid * pscale)
					g4 ([mix r l p] + s) (parenBot * pscale)

				include : Upright
				include : Translate 0 (symbolMid - symbolMid * pscale)
				include : Italify

			foreach {gn unicode parts w bal baly} [items-of jobs] : do
				define [object width dscale pscale sw l r mockInnerWidth] : bracedDottdeDimens digits ww
				if [not : query-glyph gn] : create-glyph gn : glyph-construction
					set-width width
					if (w == ww) : assign-unicode unicode

					include : circleInner dscale miniatureFont parts width mockInnerWidth bal baly
					include : refer-glyph gnb

			CircApplyRelations ra

	define [DottedScale digits width] : 1 / [Math.pow [AdjustDigitCount digits width] 0.5]
	define [createDottedGlyphs digits gidDot demands] : begin
		foreach {suffix ww} [items-of circleWidthClasses] : do
			define { jobs ra } : CollectRelatedGlyphs 'dotted' suffix digits demands

			local pendingGlyphs : jobs.map : [record] => record.2
			local miniatureFont : Miniature
				glyphs  -- [[pendingGlyphs.reduce : [a b] => [a.concat b]].concat {gidDot}]
				crowd   -- [BraceCrowd digits ww]
				scale   -- [DottedScale digits ww]
				sbscale -- 1

			foreach {gn unicode parts w} [items-of jobs] : do
				define [object width dscale pscale sw l r] : bracedDottdeDimens 1 ww
				if [not : query-glyph gn] : create-glyph gn : glyph-construction
					set-width width
					if (w == ww) : assign-unicode unicode

					local tw 0
					foreach [glyphid : items-of : parts.concat {gidDot}] : begin
						local g miniatureFont.(glyphid)
						if tw : begin # Add a little kern
							set tw : tw - SB
							apply-transform : Translate SB 0
						include g
						apply-transform : Translate (-g.advanceWidth) 0
						set tw : tw + g.advanceWidth
					apply-transform : Translate tw 0
					set tw : tw - SB
					apply-transform : Upright
					if (tw > width)
					: then : apply-transform : Scale [Math.min 1 (width / tw)] 1
					: else : apply-transform : Translate (width / 2 - tw / 2) 0
					apply-transform : Italify
					set currentGlyph.cmpPriority 11

			CircApplyRelations ra

	# Circled & Braced
	define [digitGlyphNames j] : [(j+'').split ''].map: c => unicodeGlyphs.(['0'.charCodeAt 0] + (c - 0)).name

	if [not recursive] : do "Single-digit circled"
		local compositions : list
			list 0xA9    {'C'}     WideWidth2
			list 0x1F12F {'turnC'} WideWidth2
			list 0xAE    {'R'}     WideWidth2
			list 0x2117  {'P'}     WideWidth2
			list 0x24EA  {'zero.lnum'}  WideWidth1
		compositions.push { null {'markBaseSpace'} WideWidth1 }
		foreach [j : range 1 till 9] : compositions.push : list
			0x2460 + j - 1
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 0 26] : compositions.push {(0x24B6 + j) {unicodeGlyphs.(['A'.charCodeAt 0] + j).name} WideWidth1}
		foreach [j : range 0 26] : compositions.push {(0x24D0 + j) {unicodeGlyphs.(['a'.charCodeAt 0] + j).name} WideWidth1 0.5 (XH/2)}
		createCircledGlyphs 1 compositions

	if [not recursive] : do "Double-digit circled"
		local compositions : list
			list null    {'markBaseSpace'} WideWidth1
			list 0x1F16D {'C' 'C'} WideWidth1
			list 0x1F12D {'C' 'D'} WideWidth1
			list 0x1F12E {'W' 'z'} WideWidth1
		foreach [j : range 10 till 20] : compositions.push : list
			0x2460 + j - 1
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 21 till 35] : compositions.push : list
			0x3251 + j - 21
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 36 till 50] : compositions.push : list
			0x32B1 + j - 36
			digitGlyphNames j
			begin WideWidth1
		createCircledGlyphs 2 compositions

	if [not recursive] : do "Single-digit inset circled"
		local compositions : list
			list 0x24FF {'zero.lnum'} WideWidth1
		foreach [j : range 1 till 9] : compositions.push : list
			0x2776 + j - 1
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 0 26] : compositions.push {(0x1F150 + j) {unicodeGlyphs.(['A'.charCodeAt 0] + j).name} WideWidth1}
		createInsetCircledGlyphs 1 compositions

	if [not recursive] : do "Double-digit inset circled"
		local compositions : list
		foreach [j : range 10 till 10] : compositions.push : list
			0x2776 + j - 1
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 11 till 20] : compositions.push : list
			0x24EB + j - 11
			digitGlyphNames j
			begin WideWidth1
		createInsetCircledGlyphs 2 compositions

	if [not recursive] : do "boxed"
		local compositions {}
		compositions.push { null {'markBaseSpace'} WideWidth1 }
		foreach [j : range 0 26] : compositions.push {(0x1F130 + j) {unicodeGlyphs.(['A'.charCodeAt 0] + j).name} WideWidth1}
		createBoxedGlyphs 1 compositions

	if [not recursive] : do "double-digit boxed"
		local compositions : list
			list null    {'markBaseSpace'} WideWidth1
			list 0x1F14A {'H' 'V'} WideWidth1
			list 0x1F14B {'M' 'V'} WideWidth1
			list 0x1F14C {'S' 'D'} WideWidth1
			list 0x1F14D {'S' 'S'} WideWidth1
			list 0x1F14F {'W' 'C'} WideWidth1
			list 0x1F191 {'C' 'L'} WideWidth1
			list 0x1F194 {'I' 'D'} WideWidth1
			list 0x1F196 {'N' 'G'} WideWidth1
			list 0x1F197 {'O' 'K'} WideWidth1
			list 0x1F19A {'V' 'S'} WideWidth1
		createBoxedGlyphs 2 compositions

	if [not recursive] : do "triple-digit boxed"
		local compositions : list
			list null    {'markBaseSpace'} WideWidth1
			list 0x1F14E {'P' 'P' 'V'} WideWidth1
			list 0x1F195 {'N' 'E' 'W'} WideWidth1
			list 0x1F198 {'S' 'O' 'S'} WideWidth1
			list 0x1F199 {'U' 'P' 'exclam'} WideWidth1
		createBoxedGlyphs 3 compositions

	if [not recursive] : do "quad-digit boxed"
		local compositions : list
			list null    {'markBaseSpace'} WideWidth1
			list 0x1F192 {'C' 'O' 'O' 'L'} WideWidth1
			list 0x1F193 {'F' 'R' 'E' 'E'} WideWidth1
		createBoxedGlyphs 4 compositions

	if [not recursive] : do "inset boxed"
		local compositions {}
		foreach [j : range 0 26] : compositions.push {(0x1F170 + j) {unicodeGlyphs.(['A'.charCodeAt 0] + j).name} WideWidth1}
		createInsetBoxedGlyphs 1 compositions

	if [not recursive] : do "double-digit inset boxed"
		local compositions : list
			list 0x1F18B {'I' 'C'} WideWidth1
			list 0x1F18C {'P' 'A'} WideWidth1
			list 0x1F18D {'S' 'A'} WideWidth1
			list 0x1F18E {'A' 'B'} WideWidth1
			list 0x1F18F {'W' 'C'} WideWidth1
		createInsetBoxedGlyphs 1 compositions

	if [not recursive] : do "inset mosaic"
		local compositions {}
		compositions.push { 0x1FBB1 { [unicodeGlyphs.(0x2714).name.replace [regex '.WWID$'] ".NWID"] } WideWidth2 }
		compositions.push { 0x1FBB4 { [unicodeGlyphs.(0x21B2).name.replace [regex '.WWID$'] ".NWID"] } WideWidth2 }
		compositions.push { 0x1FBC4 { [unicodeGlyphs.(0x003F).name.replace [regex '.WWID$'] ".NWID"] } WideWidth2 }
		createInsetMosaicGlyphs 1 compositions

	if [not recursive] : do "Single-digit double circled"
		local compositions {}
		compositions.push { null {'markBaseSpace'} WideWidth1 }
		foreach [j : range 1 till 9] : compositions.push : list
			0x24F5 + j - 1
			digitGlyphNames j
			begin WideWidth1
		createDoubleCircledGlyphs 1 compositions

	if [not recursive] : do "Double-digit double circled"
		local compositions {}
		compositions.push { null {'markBaseSpace'} WideWidth1 }
		foreach [j : range 10 till 10] : compositions.push : list
			0x24F5 + j - 1
			digitGlyphNames j
			begin WideWidth1
		createDoubleCircledGlyphs 2 compositions

	if [not recursive] : do "Single-digit braced"
		local compositions {}
		foreach [j : range 1 till 9] : compositions.push : list
			0x2474 + j - 1
			digitGlyphNames j
			begin WideWidth1
		foreach [j : range 0 26] : compositions.push {(0x249C + j) {unicodeGlyphs.(['a'.charCodeAt 0] + j).name} WideWidth1 0.5 (XH/2)}
		foreach [j : range 0 26] : compositions.push {(0x1F110 + j) {unicodeGlyphs.(['A'.charCodeAt 0] + j).name} WideWidth1}
		createBracedGlyphs 1 compositions

	if [not recursive] : do "Double-digit braced"
		local compositions {}
		foreach [j : range 10 till 20] : compositions.push : list
			0x2474 + j - 1
			digitGlyphNames j
			begin WideWidth1
		createBracedGlyphs 2 compositions

	if [not recursive] : do "Single-digit dotted"
		local compositions : list
			list 0x1F100 {'zero.lnum'} WideWidth1
		foreach [j : range 1 till 9] : compositions.push : list
			0x2488 + j - 1
			digitGlyphNames j
			begin WideWidth1
		createDottedGlyphs 1 'period' compositions

	if [not recursive] : do "Single-digit comma"
		local compositions {}
		foreach [j : range 0 till 9] : compositions.push : list
			0x1F101 + j
			digitGlyphNames j
			begin WideWidth1
		createDottedGlyphs 1 'comma' compositions

	if [not recursive] : do "Double-digit dotted"
		local compositions : list
		foreach [j : range 10 till 20] : compositions.push : list
			0x2488 + j - 1
			digitGlyphNames j
			begin WideWidth1
		createDottedGlyphs 2 'period' compositions
