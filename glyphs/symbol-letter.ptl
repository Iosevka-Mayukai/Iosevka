###### Letter-like symbols

$$include '../meta/macros.ptl'

import [mix linreg clamp fallback] from '../support/utils'
import [designParameters] from '../meta/aesthetics'

glyph-module

glyph-block Symbol-Currency : begin

	glyph-block-import CommonShapes

	sketch # currency
		local sw : adviceBlackness 3.5
		local radius : (RightSB - SB) / 2
		include : OShape (symbolMid + radius * 0.9) (symbolMid - radius * 0.9) (Middle - radius * 0.9) (Middle + radius * 0.9) sw
		foreach j [range 0 4] : begin
			local angle : Math.PI * (j / 2 + 1 / 4)
			include : dispiro
				widths.center sw
				flat (Middle + radius * 0.87 * [Math.cos angle]) (symbolMid + radius * 0.87 * [Math.sin angle])
				curl (Middle + radius * [Math.sqrt 2] * [Math.cos angle]) (symbolMid + radius * [Math.sqrt 2] * [Math.sin angle])
		save 'currency' 0xA4

	do "Dollar"
		define [SNeck] : params [[stroke Stroke] [slantCoeff 0]] : begin
			define strokeCoeff : StrokeWidthBlend 0 1 stroke
			define tension : 0.46 - 0.0 * strokeCoeff + slantCoeff * TanSlope
			return : alsoThruThem {{0.4 tension} {0.6 (1 - tension)}} [widths.center stroke]

		sketch # dollar.through
			include MarkSet.capital
			define top : CAP * 0.95
			define bot : CAP * 0.05
			define w : adviceBlackness 3.5
			define fine : adviceBlackness 4
			define smooth : adviceSSmooth (top - bot) (-1) w
			include : dispiro
				widths.lhs w
				g4   RightSB (top - Hook)
				hookstart (top - O)
				g4   SB (top - smooth)
				SNeck w
				g4   RightSB (bot + smooth) [widths 0 w]
				hookend (bot + O)
				g4   SB (bot + Hook)
			include : dispiro
				widths.center w
				flat Middle (top - HalfStroke)
				curl Middle (CAP - Descender / 2) [heading Upward]
			include : dispiro
				widths.center w
				flat Middle (Descender / 2) [heading Upward]
				curl Middle (bot + HalfStroke)
			save 'dollar.open'

			include : VBar Middle (bot + HalfStroke) (top - HalfStroke) fine
			save 'dollar.through'

		sketch # dollar.throughcap
			include MarkSet.capital
			define top : CAP * 0.88
			define bot : CAP * 0.12
			define w : adviceBlackness 3.5
			define fine : adviceBlackness 4
			define smooth : adviceSSmooth (top - bot) (-1) w
			include : dispiro
				widths.lhs w
				g4   RightSB (top - Hook)
				hookstart (top - O)
				g4   SB (top - smooth)
				SNeck w
				g4   RightSB (bot + smooth) [widths 0 w]
				hookend (bot + O)
				g4   SB (bot + Hook)
			include : dispiro
				widths.center w
				flat Middle (top - HalfStroke)
				curl Middle (CAP) [heading Upward]
			include : dispiro
				widths.center w
				flat Middle (0) [heading Upward]
				curl Middle (bot + HalfStroke)
			save 'dollar.opencap'

			include : VBar Middle (bot + HalfStroke) (top - HalfStroke) fine
			save 'dollar.throughcap'

		select-variant 'dollar' '$'

	sketch # cent
		define fine : adviceBlackness 4
		include [refer-glyph 'c'] AS_BASE
		include : dispiro
			widths.center
			flat Middle (XH - HalfStroke)
			curl Middle (XH - Descender / 2) [heading Upward]
		include : dispiro
			widths.center
			flat Middle (Descender / 2) [heading Upward]
			curl Middle HalfStroke
		include : VBar Middle (XH - HalfStroke) (0 + HalfStroke) fine
		save 'cent' 0xA2

	sketch # euro
		include : refer-glyph "C"
		include : HOverlayBar [mix SB 0 0.7] [mix SB RightSB 0.7] (CAP * 0.4)
		include : HOverlayBar [mix SB 0 0.7] [mix SB RightSB 0.7] (CAP * 0.6)
		save 'euro' 0x20AC

	sketch # yen
		include [refer-glyph 'Y'] AS_BASE
		include : HOverlayBar SB RightSB (CAP * 0.45)
		include : HOverlayBar SB RightSB (CAP * 0.25)
		save 'yen' 0xA5

	define [SterlineBaseShape] : glyph-construction
		local barLeft : mix SB RightSB 0.2
		local hookEndX : Math.max (barLeft + Stroke * 2.5) [mix SB RightSB 0.95]
		include : union
			dispiro
				widths.lhs
				g4 hookEndX (CAP - Hook * 0.85)
				hookstart (CAP - O) (tight -- true)
				flat barLeft [CAP - SmoothA * 0.75]
				curl barLeft [mix Stroke CAP 0.3]
				g4   SB Stroke
			HBarBottom SB RightSB 0

	sketch # sterling
		set-width Width
		include : SterlineBaseShape
		include : HOverlayBar [mix SB RightSB 0.05] [mix SB RightSB 0.7] (CAP * 0.53)
		save 'sterling' 0xA3

	sketch # liraSymbol
		set-width Width
		include : SterlineBaseShape
		include : HOverlayBar [mix SB RightSB 0.05] [mix SB RightSB 0.7] (CAP * 0.4)
		include : HOverlayBar [mix SB RightSB 0.05] [mix SB RightSB 0.7] (CAP * 0.63)
		save 'liraSymbol' 0x20A4

	sketch # won
		local df : DivFrame para.diversityM
		set-width df.width
		include [refer-glyph 'W'] AS_BASE ALSO_METRICS
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.6)
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.35)
		save 'won' 0x20A9

	sketch # frenchFranc
		include : refer-glyph "F"
		include : HOverlayBar (SB * 0.5) (SB * 3 + Stroke * HVContrast) [mix 0 XH 0.4]
		save 'frenchFranc' 0x20A3

	sketch # ruble
		include [refer-glyph 'P'] AS_BASE
		define bar1pos : (CAP - Stroke) * HBarPos
		include : HOverlayBar [mix SB 0 0.7] (SB + HalfStroke * HVContrast) bar1pos
		include : HOverlayBar [mix SB 0 0.7] [mix SB RightSB 0.8] [mix 0 (bar1pos - Stroke) (3 / 4)]
		save 'ruble' 0x20BD

glyph-block Symbol-Letter : begin

	glyph-block-import CommonShapes
	glyph-block-import LetterUnified-Basic : NShape

	sketch # numero
		local fine : adviceBlackness 4.5
		include : OShape XH [Math.max (fine * 2) (CAP * 0.1)] (Middle + [Math.max (fine / 2) ((RightSB - SB) * 0.1)]) [mix RightSB Width 0.5] fine (SmoothA * fine / Stroke) (SmoothB * fine / Stroke)
		include : NShape CAP (SB / 2) Middle 4.5 5.5 0.7
		include : HBarBottom (Middle + fine / 2) [mix RightSB Width 0.5] 0 fine
		save 'numero' 0x2116

	alias 'Ohm' 0x2126 'Omega'
	turned 'Mho' 0x2127 'Ohm' Middle (CAP / 2)

	sketch # ell
		include MarkSet.b
		local fine : adviceBlackness 3.5
		local radius : Math.max fine (Width * 0.15)
		local middle : Middle - fine / 2
		local left : middle - radius * 1.25
		local right : middle + radius * 1.5
		local sma : SmoothA * 0.6
		local smb : SmoothB * 0.6
		include : dispiro
			widths.center fine
			g2   left [mix 0 CAP 0.33]
			quadcontrols 1 0.6
			g2   right [mix 0 CAP 0.8]
			arcvh
			g2   [mix middle right 0.5] (CAP - O - fine / 2)
			archv
			flat middle (CAP - sma)
			curl middle (SmoothB * 0.5 + fine / 2)
			hookend (O + fine / 2)
			g2   (middle + radius * 2) SHook

		save 'ell' 0x2113

	sketch # estimated
		local fineArc : CAP * 0.0300
		local fineBar : CAP * 0.0278
		local thickBarWidth : (0.183 / [Math.sqrt 0.9]) * [Math.sqrt (CAP * (RightSB - SB))]
		define smA : SmoothAOf (Smooth * (CAP / XH)) Width
		define smB : SmoothBOf (Smooth * (CAP / XH)) Width
		include : union
			HBarBottom SB RightSB (CAP * 0.5) fineBar
			difference
				union
					difference
						OShapeOutline CAP 0 SB RightSB fineArc smA smB
						OShapeOutline (CAP - fineArc) (0 + fineArc) [mix SB RightSB 0.077] [mix RightSB SB 0.077] fineArc (smA - fineArc) (smB - fineArc)
					intersection
						OShapeOutline.NoOvershoot CAP 0 SB RightSB fineArc smA smB
						union
							Rect CAP 0 SB (SB + thickBarWidth)
							Rect CAP (CAP * 0.5) (RightSB - thickBarWidth) RightSB
				Rect (CAP * 0.5) (CAP * 0.208) Middle Width
		save 'estimated' 0x212E

	turned 'turniota' 0x2129 'iota' Middle (XH / 2)

	sketch # mathAleph
		define p 0.3
		include : xStrand true SB CAP RightSB 0 0.1 0.4 0.28
		include : intersection
			dispiro
				widths.rhs
				g4.down.start RightSB CAP
				g4 [mix SB RightSB p] 0
			spiro-outline
				corner SB CAP
				corner RightSB CAP
				corner RightSB 0
		include : intersection
			dispiro
				widths.rhs
				g4.up.start SB 0
				g4 [mix SB RightSB (1 - p)] CAP
			spiro-outline
				corner SB 0
				corner RightSB 0
				corner SB CAP
		save 'mathAleph' 0x2135

	sketch # mathBeth
		define pX 0.7
		define pY 0.8
		define turnX : mix SB RightSB pY
		include : dispiro
			widths.rhs
			flat SB CAP
			curl [Math.min (turnX - Stroke * 1.5 * HVContrast) [mix SB turnX pX]] CAP
			archv
			flat turnX [Math.min (CAP - Stroke * 1.5) [mix 0 CAP pY]]
			curl turnX 0
		include : HBarBottom SB RightSB 0
		save 'mathBeth' 0x2136

glyph-block Symbol-BlackboardBold : begin

	glyph-block-import CommonShapes

	define bbs : adviceBlackness 6
	define bbd : clamp (Width / 5.5) (Width / 4) (bbs * 2.5)

	sketch # bbN
		include : VBarLeft SB 0 CAP bbs
		include : VBarRight RightSB 0 CAP bbs
		include : intersection
			Rect CAP 0 SB RightSB
			union
				dispiro
					widths.center bbs
					corner (SB + bbs * HVContrast) CAP
					corner (RightSB - bbs * HVContrast / 2) (CAP / 5)
				dispiro
					widths.center bbs
					corner (SB + bbs * HVContrast / 2) (CAP - (CAP / 5))
					corner (RightSB - bbs * HVContrast) 0
		save 'bbN' 0x2115

	sketch # bbZ
		include : HBarTop SB RightSB CAP bbs
		include : HBarBottom SB RightSB 0 bbs
		include : intersection
			Rect CAP 0 SB RightSB
			union
				dispiro
					widths.center bbs
					corner SB (bbs / 2)
					corner (RightSB - bbd) (CAP - bbs / 2)
				dispiro
					widths.center bbs
					corner (SB + bbd) (bbs / 2)
					corner RightSB (CAP - (bbs / 2))

		include : intersection
			union
				VBarRight RightSB (CAP - bbs * 2) CAP bbs
				VBarLeft  SB 0 (bbs * 2) bbs
			spiro-outline
				corner SB (bbs / 2)
				corner (RightSB - bbd) (CAP - bbs / 2)
				corner RightSB (CAP - (bbs / 2))
				corner (SB + bbd) (bbs / 2)

		save 'bbZ' 0x2124

	glyph-block-import LetterUnified-Basic : CShape CShapeOutline
	sketch # bbC
		include : CShape CAP 0 bbs
		include : intersection
			CShapeOutline CAP 0
			VBar (SB + bbd) 0 CAP bbs
		save 'bbC' 0x2102

	glyph-block-import LetterUnified-Basic : PShape PShapeOutline
	define [BBPShape] : params [[mul PShape.defaultMul] [overshoot PShape.defaultOvershoot]] : glyph-construction
		define sb : SB * mul
		include : difference
			PShape CAP (sw -- bbs) (mul -- mul) (overshoot -- overshoot) (slab -- false)
			Rect (CAP - bbs) 0 (sb + HVContrast * bbs / 2) (sb + bbd - HVContrast * bbs / 2)
		include : VBarLeft sb 0 CAP bbs
		include : VBar (sb + bbd) 0 CAP bbs
		include : HBarBottom sb (sb + bbd) 0 bbs
		include : intersection
			PShapeOutline CAP (sw -- bbs) (mul -- mul) (overshoot -- overshoot) (offset -- 1)
			VBar (RightSB - overshoot - bbd) 0 CAP bbs

	sketch # bbP
		include : BBPShape
		save 'bbP' 0x2119

	glyph-block-import LetterUnified-Basic : RLegShape RLegTerminalX
	sketch # bbR
		define [SingleLeg] : RLegShape (RightSB - O) 0 ((CAP - bbs) * HBarPos) CAP false true bbs (bbd / 2)
		define terminalX : RLegTerminalX true (RightSB - O) bbs
		include : BBPShape (mul -- 1) (overshoot -- O)
		include : difference
			union
				SingleLeg
				create-glyph : glyph-construction
					include : SingleLeg
					apply-transform : Translate (bbs / 2 - bbd) 0
				HBarBottom (terminalX + bbs / 2 - bbd) (terminalX - bbs / 2) 0 bbs
			PShapeOutline CAP (sw -- bbs) (mul -- 1) (overshoot -- O) (offset -- 1)
		save 'bbR' 0x211D

	sketch # bbH
		include : VBarLeft  SB 0 CAP bbs
		include : VBarRight RightSB 0 CAP bbs
		include : VBar      (SB + bbd) 0 CAP bbs
		include : VBar      (RightSB - bbd) 0 CAP bbs
		include : HBar (SB + bbd) (RightSB - bbd)  (CAP * HBarPos) bbs
		include : HBarTop SB (SB + bbd) CAP bbs
		include : HBarTop (RightSB - bbd) RightSB CAP bbs
		include : HBarBottom SB (SB + bbd) 0 bbs
		include : HBarBottom (RightSB - bbd) RightSB 0 bbs
		save 'bbH' 0x210D

	sketch # bbQ
		define [QInner] : OShapeOutline.NoOvershoot CAP 0 SB RightSB bbs SmoothA SmoothB
		include : OShape CAP 0 SB RightSB bbs SmoothA SmoothB
		include : intersection
			QInner
			union
				VBar (SB + bbd) 0 CAP bbs
				VBar (RightSB - bbd) 0 CAP bbs

		define terminalX : Middle + HookX
		define tailDeltaX : bbd / 2 - bbs / 8 * HVContrast
		define qTerminalY : bbs - Hook - bbd / 4
		define [QTail x] : dispiro
			widths.center bbs
			flat (x) (CAP / 2)
			curl (x) 0
			arcvh
			flat [Math.min (terminalX - 1) (x - qTerminalY)] qTerminalY
			curl terminalX qTerminalY
		include : difference
			union
				QTail (Middle - tailDeltaX)
				QTail (Middle + tailDeltaX)
			QInner
		save 'bbQ' 0x211A
