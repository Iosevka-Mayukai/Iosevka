$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Upper-AE-OE : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Latin-Upper-F : EFVJutLength

	create-glyph 'AE' 0xC6 : glyph-proc
		define df : DivFrame para.diversityM 3
		define eBarPos : DesignParameters.upperEBarPos SLAB
		define sw : Math.min df.mvs : AdviceStroke2 3 3 CAP df.div
		define eleft : df.middle - sw * 0.25 * HVContrast
		define fine : AdviceStroke2 3 4 CAP df.div
		define swVJut : Math.min sw ((df.rightSB - eleft - sw * HVContrast) * (4 / 5))

		set-width df.width
		include : df.markSet.capital

		local turn : XH * 0.1

		# A half
		include : dispiro
			widths.rhs sw
			flat df.leftSB 0 [heading Upward]
			curl df.leftSB (CAP * 0.1) [heading Upward]
			quadcontrols 0 0.3 6 unimportant
			g4   (eleft - HalfStroke) CAP [widths.rhs fine]

		include : spiro-outline
			corner (eleft - HalfStroke) CAP
			corner eleft CAP
			corner eleft (CAP - sw)
		include : intersection
			WithTransform [Translate (-O) 0] : spiro-outline
				corner df.leftSB 0 [heading Upward]
				curl   df.leftSB (CAP * 0.1) [heading Upward]
				quadcontrols 0 0.3 6 unimportant
				corner   (eleft - HalfStroke) CAP [widths.rhs fine]
				corner eleft CAP
				corner eleft 0
			HBarTop 0 eleft (XH / 2) sw

		# E half
		include : VBarLeft eleft 0 CAP sw
		include : HBarTop (eleft - O) df.rightSB CAP
		include : HBar (eleft - O) (df.rightSB - sw / 4) (CAP * eBarPos)
		include : HBarBottom (eleft - O) df.rightSB 0
		if SLAB : begin
			local { jutTop jutBot } : EFVJutLength CAP eBarPos sw
			include : CenterBottomSerif (df.leftSB + sw / 2 * HVContrast) 0 Jut sw
			include : DownwardRightSerif df.rightSB CAP jutTop swVJut
			include : UpwardRightSerif df.rightSB 0 jutBot swVJut

	alias 'cyrl/AE' 0x4D4 'AE'

	define [OEShape top df] : glyph-proc
		define eBarPos : DesignParameters.upperEBarPos SLAB
		define sw : Math.min df.mvs : AdviceStroke2 3 3 top df.div
		define eleft : df.middle - sw * [if SLAB (1 / 3) (1 / 4)] * HVContrast
		define swVJut : Math.min sw ((df.rightSB - eleft - sw * HVContrast) * (4 / 5))

		# O half
		include : dispiro
			widths.lhs sw 0
			straight.left.start eleft top [heading Leftward]
			archv
			flat  df.leftSB (top - SmoothA)
			curl  df.leftSB (SmoothB)
			arcvh
			straight.right.end eleft 0 [heading Rightward]

		# E half
		include : VBarLeft eleft 0 top sw
		include : HBarTop (eleft - O) df.rightSB top sw
		include : HBar (eleft - O) (df.rightSB - sw / 4) (top * 0.54) sw
		include : HBarBottom (eleft - O) df.rightSB 0 sw

		if SLAB : begin
			local { jutTop jutBot } : EFVJutLength top eBarPos sw
			include : DownwardRightSerif df.rightSB top jutTop swVJut
			include : UpwardRightSerif df.rightSB 0 jutBot swVJut

	create-glyph 'OE' 0x152 : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.capital
		include : OEShape CAP df

	create-glyph 'smcpOE' 0x276 : glyph-proc
		local df : DivFrame para.diversityM 3
		set-width df.width
		include : df.markSet.e
		include : OEShape XH df
