$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-K : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	local [KBalance slab straightBar] : if slab (Width / 16) : if straightBar (Width / 32) 0
	local [KBalanceRight slab straightBar] : if slab (-Width / 32) : if straightBar (Width / 32) 0
	local [KBalanceRightCursive slab straightBar] : if slab (Width / 32) : if straightBar (Width / 32) 0
	local [KO slab straightBar top stroke] : if straightBar (([if slab (0) (-4)] * OX - stroke / 3) * (XH / top)) 0

	define [KLegShapeImpl left right stroke top straightBar slabLeft slab] : glyph-proc
		local turn (top * 0.99)
		local fine : AdviceStroke 3.5
		local Ok : KO slab straightBar top stroke
		local kshLeft : left + [KBalance slabLeft straightBar]
		local kshRight : right + [KBalanceRight slab straightBar]

		if straightBar : do
			local attach (top * 0.42 - stroke)
			local attach2 (top * 0.72 + stroke)
			include : intersection
				Rect top 0 kshLeft (2 * Width)
				dispiro
					widths.rhs stroke
					flat (kshRight - Ok) top
					curl (kshLeft + stroke) attach [widths 0 fine]

			include : intersection
				spiro-outline
					corner (kshLeft + stroke) 0
					corner (kshLeft + stroke) (attach + 1)
					corner (kshRight - Ok - 1) top
					corner (kshRight - Ok) top
					corner (kshRight - Ok) 0
				dispiro
					widths.lhs stroke
					flat (kshRight - Ok) 0
					curl (kshLeft + stroke) attach2
		: else : do
			local attach (top * [if slab 0.325 0.375])
			local attach2 [if slab [mix kshLeft kshRight 0.48] Middle]
			include : intersection
				Rect top 0 kshLeft (2 * Width)
				dispiro
					g4.down.start (kshRight) top [widths.heading 0 (stroke * [if slab 1.15 1.05] * (Width * 2 / UPM)) Downward]
					bezcontrols 0 0.2 0.5 0.65 8
					g4 (kshLeft + stroke) attach [widths 0 fine]
			include : difference
				dispiro
					widths.center
					g4.up.start (kshRight - O - stroke / 2 * HVContrast) 0 [heading Upward]
					quadcontrols 0 0.25 8
					g4 attach2 (top * 0.61) [widths.center fine]
				spiro-outline
					corner.down.start kshRight top
					bezcontrols 0 0.2 0.5 0.65 8
					corner (kshLeft + stroke) attach
					corner kshLeft 0
					corner kshLeft top

		if slab : do
			local topSerifX : kshRight - (stroke * [if slab 1.15 1.05] * (Width * 2 / UPM) / 2 - stroke / 2) * HVContrast * [if para.isItalic 1 0] - stroke / 2 * 0.5 * HVContrast
			local bottomSerifX : kshRight - O * [if para.isItalic 1 0]

			include : RightwardTopSerif topSerifX top (SideJut + stroke / 2 * 0.5 * HVContrast)
			include : RightwardBottomSerif bottomSerifX 0 SideJut

	define [KCursiveLoopAndLegDimen top straightBar slabLeft slab] : begin
		define kshLeft : SB + [KBalance slabLeft straightBar]
		define kshRight : RightSB + [KBalanceRightCursive slab straightBar] + 0.2 * Stroke

		define arcFine : Stroke * CThin
		define arcStroke : AdviceStroke2 2 3 top
		define arcTerminalFine : AdviceStroke2 3 4 top
		define expansion : Width / (UPM / 2) - 1

		define pArcStartY    : 0.46 + 0.1 * (arcStroke / Width)
		define pArcTopX      : 0.625 - 0.05 * (arcStroke / Width) - 0 * expansion * (arcStroke / UPM)
		define pArcRightX    : 0.95 - TanSlope * 0.25 + ([if SLAB 0 0.05] + 0.75 * TanSlope) * (arcStroke / Width)
		define pArcRightY    : 0.575 - 0.625 * (arcStroke / Width) - 0.5 * expansion * (arcStroke / UPM)
		define pArcTerminalX : 0.15 - 0.5 * (arcStroke / Width)
		define pArcBottomX   : 0.15 + 0.5 * (arcStroke / Width)
		define pArcBottomY   : 0.45 + 0.5 * (arcStroke / Width)

		define arcRightSlope : 0.05 + 0.2 * (arcStroke / Width) + 1 * expansion * (arcStroke / UPM)
		define arcTopSlope   : shoulderMidSlope arcFine arcStroke 1

		define arcStartX    : kshLeft + HVContrast * (Stroke - arcFine)
		define arcStartY    : top * pArcStartY
		define arcTerminalX : mix arcStartX kshRight pArcTerminalX
		define arcBottomX   : mix arcStartX kshRight pArcBottomX
		define arcBottomY   : mix 0 top pArcBottomY
		define arcTerminalY : arcBottomY + arcStroke * 0.125 - O
		define arcRightX    : kshRight * pArcRightX
		define arcRightY    : mix arcBottomY top pArcRightY
		define arcTopX      : mix arcStartX arcRightX pArcTopX
		define arcTopY      : top - O

		define slabStartX   : kshRight - (Stroke * 0.325 - TanSlope) * HVContrast

		return : object arcStartX arcStartY arcFine arcRightX arcRightY arcRightSlope arcTopX arcTopY arcStroke arcTopSlope arcBottomX arcBottomY arcTerminalX arcTerminalY arcTerminalFine kshRight slabStartX

	define [KCursiveLoopAndLegShapeImpl top straightBar slabLeft slab] : glyph-proc
		define dim : KCursiveLoopAndLegDimen top straightBar slabLeft slab
		include : dispiro
			g4.up.start dim.arcStartX dim.arcStartY [widths.heading 0 dim.arcFine Upward]
			arcvh 8 2.0
			g4.right.mid dim.arcTopX dim.arcTopY
				widths.rhs.heading dim.arcStroke {.y (+1) .x dim.arcTopSlope}
			archv
			g4.down.mid dim.arcRightX (dim.arcRightY - 0.5 * dim.arcRightSlope * dim.arcStroke * HVContrast)
				heading {.y dim.arcRightSlope .x HVContrast}
			arcvh
			g4 dim.arcBottomX (dim.arcBottomY - dim.arcStroke) [widths.rhs.heading dim.arcTerminalFine Leftward]
			g4 dim.arcStartX (dim.arcTerminalY - dim.arcStroke) [widths.rhs.heading dim.arcStroke Leftward]

		include : difference
			intersection
				Rect XH 0 0 [if SLAB (dim.slabStartX + SideJut) (Width * 2)]
				dispiro
					flat dim.arcTerminalX dim.arcTerminalY [widths.lhs]
					curl dim.kshRight 0 [widths.rhs]
			spiro-outline
				g4.up.start (dim.arcStartX - O) dim.arcStartY
				arcvh 4 2.1
				g4.right.mid dim.arcTopX (dim.arcTopY + O)
				archv 4 2.2
				g4.down.mid (dim.arcRightX + O) (dim.arcRightY - 0.5 * dim.arcRightSlope * dim.arcStroke * HVContrast)
				arcvh
				g4 dim.arcBottomX (dim.arcBottomY - dim.arcStroke - O)
				g4 dim.arcStartX (dim.arcTerminalY - dim.arcStroke - O)

		if slab : include : RightwardBottomSerif dim.slabStartX 0 SideJut

	define [KNormalLegs top bar slabLeft slab] : KLegShapeImpl SB RightSB Stroke top bar slabLeft slab
	define [KCursiveLegs top bar slabLeft slab]  : KCursiveLoopAndLegShapeImpl top bar slabLeft slab

	define [KCyrlCursiveDescender top straightBar slabLeft slab] : begin
		define dim : KCursiveLoopAndLegDimen top straightBar slabLeft slab
		return : CyrDescender dim.slabStartX (connex -- 0.5)

	define [KCyrlNormalDescender top straightBar slabLeft slab] : CyrDescender
		RightSB + [KBalanceRight slab straightBar] - [KO slab straightBar top Stroke]
		connex -- [if straightBar 1 0]

	define [KShapeT Legs straightBar] : glyph-proc
		include : VBarLeft (SB + [KBalance SLAB straightBar]) 0 CAP
		include : Legs CAP straightBar SLAB SLAB
		if SLAB : begin
			include : CenterTopSerif (SB + [KBalance SLAB straightBar] + HalfStroke * HVContrast) CAP Jut
			include : CenterBottomSerif (SB + [KBalance SLAB straightBar] + HalfStroke * HVContrast) 0 Jut

	create-glyph 'K.straight' : glyph-proc
		include : MarkSet.capital
		include : KShapeT KNormalLegs true
		create-derived 'KDescender.straight' : KCyrlNormalDescender CAP true SLAB SLAB

	create-glyph 'K.curly' : glyph-proc
		include : MarkSet.capital
		include : KShapeT KNormalLegs false
		create-derived 'KDescender.curly' : KCyrlNormalDescender CAP false SLAB SLAB

	select-variant 'K' 'K'
	alias 'grek/Kappa' 0x39A 'K'
	alias 'cyrl/Ka' 0x41A 'K'
	alias 'letterLike/kelvinSign' 0x212A 'K'
	select-variant 'KDescender' 0x2C69 (follow -- 'K')
	alias 'cyrl/KaDescender' 0x49A 'KDescender'

	define [LowerKShapeT Legs straightBar slabTop slabBot] : glyph-proc
		include : VBarLeft (SB + [KBalance slabTop straightBar]) 0 CAP
		include : Legs XH straightBar slabTop slabBot
		if slabTop : include : LeftwardTopSerif (SB + [KBalance slabTop straightBar]) CAP SideJut
		if slabBot : include : tagged 'serifLB'
			CenterBottomSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) 0 Jut

	create-glyph 'k.straight' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KNormalLegs true SLAB (SLAB && !para.isItalic)
		create-derived 'kDescender.straight' : KCyrlNormalDescender XH true SLAB (SLAB && !para.isItalic)

	create-glyph 'k.curly' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KNormalLegs false SLAB (SLAB && !para.isItalic)
		create-derived 'kDescender.curly' : KCyrlNormalDescender XH false SLAB (SLAB && !para.isItalic)

	create-glyph 'k.cursive' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KCursiveLegs true SLAB (SLAB && !para.isItalic)
		create-derived 'kDescender.cursive' : KCyrlCursiveDescender XH true SLAB (SLAB && !para.isItalic)

	create-glyph 'k.motionSerifedStraight' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KNormalLegs true true false
		create-derived 'kDescender.motionSerifedStraight' : KCyrlNormalDescender XH true true false

	create-glyph 'k.motionSerifedCurly' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KNormalLegs false true false
		create-derived 'kDescender.motionSerifedCurly' : KCyrlNormalDescender XH false true false

	create-glyph 'k.motionSerifedCursive' : glyph-proc
		include : MarkSet.b
		include : LowerKShapeT KCursiveLegs true true false
		create-derived 'kDescender.motionSerifedCursive' : KCyrlCursiveDescender XH true true false

	select-variant 'k' 'k'
	select-variant 'kDescender' 0x2C6A (follow -- 'k')
	alias 'cyrl/ka.BGR' null 'k'

	glyph-block-import Letter-Blackboard : BBS BBD BBBarLeft
	define [BBKLegShape top left right] : begin
		local kDiag : DiagCorDs (top / 2) (right - left) BBD
		return : union
			HBarBottom (right - kDiag * BBD) right 0 BBS
			intersection
				Rect top 0 left (2 * Width)
				ExtLineCenter 2 BBS right top left (top / 2)
			intersection
				spiro-outline
					corner right top
					corner left (top / 2)
					corner left 0
					corner (Width * 2) 0
					corner (Width * 2) top
				union
					ExtLineCenter 2 BBS right 0 (left + kDiag * BBD) (top / 2)
					ExtLineCenter 2 BBS (right - kDiag * BBD) 0 left (top / 2)

	create-glyph 'mathbb/K' 0x1D542 : glyph-proc
		include : MarkSet.capital
		include : BBBarLeft SB 0 CAP
		include : BBKLegShape CAP (SB + BBD + HVContrast * BBS) RightSB

	create-glyph 'mathbb/k' 0x1D55C : glyph-proc
		include : MarkSet.b
		include : BBBarLeft SB 0 CAP
		include : BBKLegShape XH (SB + BBD + HVContrast * BBS) RightSB

	define [LowerKappaShapeT Legs straightBar] : glyph-proc
		include : VBarLeft (SB + [KBalance SLAB straightBar]) 0 XH
		include : Legs XH straightBar SLAB false
		if SLAB : include : LeftwardTopSerif (SB + [KBalance SLAB straightBar]) XH SideJut

	create-glyph 'grek/kappa.straight' : glyph-proc
		include : MarkSet.e
		include : LowerKappaShapeT KNormalLegs true

	create-glyph 'grek/kappa.curly' : glyph-proc
		include : MarkSet.e
		include : LowerKappaShapeT KNormalLegs false

	select-variant 'grek/kappa' 0x3BA (follow -- 'K')

	define [LowerCyrKaShapeT Legs straightBar] : glyph-proc
		include : VBarLeft (SB + [KBalance SLAB straightBar]) 0 XH
		include : Legs XH straightBar SLAB SLAB
		if SLAB : begin
			include : CenterBottomSerif (SB + [KBalance SLAB straightBar] + HalfStroke * HVContrast) 0 Jut
			include : CenterTopSerif (SB + [KBalance SLAB straightBar] + HalfStroke * HVContrast) XH Jut

	create-glyph 'cyrl/ka.straight' : glyph-proc
		include : MarkSet.e
		include : LowerCyrKaShapeT KNormalLegs true
		create-derived 'cyrl/kaDescender.straight' : KCyrlNormalDescender XH true SLAB SLAB

	create-glyph 'cyrl/ka.curly' : glyph-proc
		include : MarkSet.e
		include : LowerCyrKaShapeT KNormalLegs false
		create-derived 'cyrl/kaDescender.curly' : KCyrlNormalDescender XH false SLAB SLAB

	select-variant 'cyrl/ka' 0x43A (follow -- 'K')
	alias 'latinkappa' 0x138 'cyrl/ka'
	select-variant 'cyrl/kaDescender' 0x49B (follow -- 'K')

	define [KHookTopBar slab straightBar] : union
		VBarLeft (SB + [KBalance slab straightBar]) 0 (CAP - Hook - HalfStroke)
		VerticalHook (SB + [KBalance slab straightBar] + HalfStroke * HVContrast) (CAP - Hook - HalfStroke) HookX (-Hook)

	define [KHookTopShapeT Legs straightBar] : glyph-proc
		include : Legs CAP straightBar SLAB SLAB
		include : KHookTopBar SLAB straightBar
		if SLAB : begin
			include : CenterBottomSerif (SB + [KBalance SLAB straightBar] + HalfStroke * HVContrast) 0 Jut

	define [LowerKHookTopShapeT Legs straightBar slabTop slabBot] : glyph-proc
		include : Legs XH straightBar slabTop slabBot
		include : KHookTopBar slabTop straightBar
		if slabBot : include : tagged 'serifLB'
			CenterBottomSerif (SB + [KBalance slabTop straightBar] + HalfStroke * HVContrast) 0 Jut

	create-glyph 'Khooktop.straight' : glyph-proc
		include : MarkSet.capital
		include : KHookTopShapeT KNormalLegs true
	create-glyph 'Khooktop.curly' : glyph-proc
		include : MarkSet.capital
		include : KHookTopShapeT KNormalLegs false

	create-glyph 'khooktop.straight' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KNormalLegs true false (SLAB && !para.isItalic)
	create-glyph 'khooktop.curly' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KNormalLegs false false (SLAB && !para.isItalic)
	create-glyph 'khooktop.cursive' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KCursiveLegs true false (SLAB && !para.isItalic)
	create-glyph 'khooktop.motionSerifedStraight' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KNormalLegs true false false
	create-glyph 'khooktop.motionSerifedCurly' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KNormalLegs false false false
	create-glyph 'khooktop.motionSerifedCursive' : glyph-proc
		include : MarkSet.b
		include : LowerKHookTopShapeT KCursiveLegs true false false

	select-variant 'Khooktop' 0x198 (follow -- 'K')
	select-variant 'khooktop' 0x199 (follow -- 'k')

	turned 'turnK' 0xA7B0 'K' Middle (CAP / 2)
	turned 'turnk' 0x29E  'k' Middle (CAP / 2)

	define [BashkirKaShape top straightBar] : glyph-proc
		local left : if SLAB ([mix SB RightSB 0.35] - MVertStroke / 2 * HVContrast) [mix SB RightSB 0.2]
		local leftNB : left - [KBalance SLAB straightBar]
		local barLeft : mix 0 SB [if SLAB 0.25 0.375]
		local sw : AdviceStroke 3

		include : HBarTop barLeft (Stroke * 0.1 + left) top
		include : VBarLeft left 0 top sw
		include : KLegShapeImpl leftNB RightSB Stroke top straightBar SLAB SLAB
		if SLAB : begin
			include : CenterBottomSerif (left + HalfStroke * HVContrast) 0 Jut
			include : DownwardLeftSerif barLeft top VJut (MVertStroke / HVContrast)

	create-glyph 'cyrl/BashkirUpperKa.straight' : glyph-proc
		include : MarkSet.capital
		include : BashkirKaShape CAP true
	create-glyph 'cyrl/BashkirUpperKa.curly' : glyph-proc
		include : MarkSet.capital
		include : BashkirKaShape CAP false
	create-glyph 'cyrl/BashkirKa.straight' : glyph-proc
		include : MarkSet.e
		include : BashkirKaShape XH true
	create-glyph 'cyrl/BashkirKa.curly' : glyph-proc
		include : MarkSet.e
		include : BashkirKaShape XH false

	select-variant 'cyrl/BashkirUpperKa' 0x4A0 (follow -- 'K')
	select-variant 'cyrl/BashkirKa'      0x4A1 (follow -- 'K')
